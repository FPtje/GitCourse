Language of slides: English
Language of training: English if not everyone speaks Dutch. Dutch otherwise.


Main structure of training:

Advantages git (three quick slides, very important but not the main purpose of the training)
	- Standalone
	- Compared to Dropbox/Google Drive
	- Compared to SVN

Getting started with git
	- How to install (the git command line interface, again short slides because it's not that difficult)
		* Windows/Mac: Web link
		* Linux (apt-get, yum, pacman)
	- Opening git bash (Mac/Linux: open terminal, Windows: Right click folder and "open git bash")
	- Setting up SSH, name, email (https://help.github.com/articles/generating-ssh-keys)
	- Making a repository. Either:
		* git init: start a new repository at the current location
		* git clone: duplicate a repository from somewhere else

Basic git structure
	Read more: 	http://git-scm.com/book/en/Getting-Started-Git-Basics#The-Three-States
				http://git-scm.com/book/en/Git-Basics-Recording-Changes-to-the-Repository
	Three states:
	- Working directory
	- Staging area
	- Git repository

Initial commit (assuming repo initiated with git init, which is easier to understand)
	- git status
	- adding/removing initial files to staging area:
		git add, git rm, git mv, .gitignore
	- git commit (include info on commit hash)

Further commits
	- git diff
	- git checkout file: resetting file to the state of last commit
	- git log (See: http://git-scm.com/book/en/Git-Basics-Viewing-the-Commit-History)
	- (gitk)
	- git show

The tree of commits (what a commit is, how multiple commits relate to one another)
	- master branch, HEAD
	- creating your own branch
		git checkout -b newBranch (do not confuse with git checkout file)
	- Switch to another branch: git checkout master / git checkout otherBranch
	- git merge
	- git branch -D branchname

Resolving conflicts
	- How a conflict looks in git status
	- Fixing a conflict
	- git mergetool
	- git add
	- git commit

Remote repositories
	- Local vs remote
	- git remote -v/add/remove (git branch --set-upstream-to)
	- git push origin master/git push if branch is set to track branch on remote
		(git push origin :branch to remove remote branch)
	- git pull

Best Practices and tips
	- set up ssh-agent and ssh-add so you only have to enter your password once (alias pw='ssh-add ~/.ssh/id_rsa')
	- atomicity commits
	- avoid binary files in the repo at all cost, especially object files and executables. They do not belong in the repo and they will actively mess things up.
	- use branches for experimental features, big refactors and things that will break other code until completely implemented
	- Working alone? Use a private git repo and have your code synced between computers without having to resort to shitty dropbox
	- push/pull often enough to prevent conflicts
	- before commit, do git status, then git diff, check your changes
	- always commit a working version of the code (everyone will hate you if you don't)
	- use private repositories for university projects or people WILL steal your code.
		Look here for free private repos: https://git.wiki.kernel.org/index.php/GitHosting
	- you can use a ui for git (even that terrible program called tortoise-git), but I do not recommend it. The cli can do MUCH more.

Awesome things you can do with git (slides with very short explanation of common awesome git things, with links to further reading)
	- Revert commits
	- Include other projects in your project (submodule, subtree merging)
	- git bisect
	- git tag
	- git stash
	- git clean
	- git blame
	- Pull request
	- cherry-pick
	- Set up your own git server! (http://git-scm.com/book/en/Git-on-the-Server)

Further reading:
	- Excellent explanation: http://git-scm.com/documentation
	- Cheat sheet: http://www.git-tower.com/blog/git-cheat-sheet-detail/
	- Cheat sheet: http://byte.kde.org/~zrusin/git/git-cheat-sheet-medium.png
	- Interactive cheat sheet: http://ndpsoftware.com/git-cheatsheet.html
	- Interactive practical: http://try.github.io/